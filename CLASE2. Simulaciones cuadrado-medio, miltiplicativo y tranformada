#metodo de cuadrado medio para generar numeros aleatorios, este metodo genera ciclos cortos,que es lo 
#que no queremos
install.packages("installr") 
library(installr) 
updateR() 
version 
install.packages("dplyr")
library(dplyr)
cuad_med<- function(seed, n) {
    seeds <- numeric(n)
    values <- numeric(n)
    for(i in 1:n) {
      x<- seed ^ 2
      seed = case_when(
        nchar(x) >2 ~ (x %/% 1e2) %% 1e4,
        TRUE ~ 0)
      values[i] <- x
      seeds[i]<- seed
    }
    cbind(seeds, values)
}
x<- cuad_med(1931,10) 
x
#los valores que se estan generando caen rapidamente a cero, por lo cual no es un buen metodo


#metodo congruencial multiplicativo

#generar 50 num a partir del sig generador Xn=16087Xn-1   mod (2^32 -1)

n<-50  #numero de simulaciones
num_a<- numeric(n)
seed<-27218

  for (j in 1:n)
  {seed<- (16087*seed)%%(2^32-1)
    num_a[j]<-seed/(2^32-1)
    }
num_a
# el resuktado es:
# [1] 0.101946286 0.009909561 0.415113789 0.935529417 0.861725565 0.579171869 0.137862075 0.787202975
#[9] 0.734262002 0.072831600 0.641956532 0.154727469 0.100790083 0.410068422 0.770707702 0.374801720
#[17] 0.435263985 0.091729443 0.651547018 0.436880571 0.097740935 0.358428058 0.032170093 0.520292413
#[25] 0.944049161 0.918851632 0.566198750 0.439292299 0.895217195 0.359021783 0.583426201 0.577301701
#[33] 0.052455961 0.859041151 0.394990129 0.206198096 0.108768062 0.751820771 0.540738782 0.864786678
#[41] 0.823284635 0.179920245 0.376977632 0.439160791 0.779638857 0.050286094 0.952386225 0.037203135
#[49] 0.486832384 0.672556064
#ya nos dio un resultado mejor y no se va al cero tan directo

#mestrodo congruecial mixto: con el generador Xn=5Xn-1
#+3  mod 16  con X0=7 haz 19 simualciones
n<-19  #numero de simulaciones
num_a<- numeric(n)
seed<-7
for (j in 1:n)
{seed<- ((5*seed)+3)%%(16)
num_a[j]<-seed/(16)
}
num_a


#SE quieren generar numeros al azar con la exponcial con la trasformada inversa
lambda<- 2
nsim<- 10^5 #numero de simulaciones
set.seed(1)
U <- runif(nsim)
X<- -log(U)/lambda # -log(1-u)/lambda ... es la formula que sacamos en la libreta
X
hist(x, breaks = 100, freq = FALSE, xlim = c(0,5), ylim = c(0,2.5))
curve(dexp(x,lambda), lwd=2, add= TRUE, col= "red")
#CON LA FORMA FACIL, HAREMOS LA FUNCION rexp
rexp(10^5,2)


# se requiere generar numeros al azar con un weibull con alpha=2 y lambda=1
lambda<- 1
nsim<- 10^5 #numero de simulaciones
set.seed(1)
U <- runif(nsim)
X<- (-log(U))^(1/2)
X
hist(X, breaks = 100, freq = FALSE, xlim = c(0,5), ylim = c(0,2.5))
curve(dweibull(x,2, scale = 1, log = FALSE), lwd=2, add= TRUE, col= "red")
#CON LA FORMA FACIL, HAREMOS LA FUNCION rexp
rweibull(10^5, 2, scale = 1)
